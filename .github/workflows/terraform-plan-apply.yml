name: "[CI] Deploy Terraform stacks"
on:
  workflow_call:
    inputs:
      environment_name:
        required: false
        default: dev
        type: string
      aws_region:
        required: false
        default: eu-west-2
        type: string
      destructive_action_check:
        required: false
        type: boolean
        default: false
      tflint_module_scan:
        required: false
        type: boolean
        default: false
      execute_terraform_plan:
        required: false
        type: boolean
        default: false
      python_version:
        required: false
        type: string
        default: "3.12"
        description: "The version of python required when building packages via Terraform"
      repo:
        required: false
        type: string
        default: ${{ github.repository }}
        description: "Specify the org/repo of the repo containing Terraform code. Normally left blank to clone calling repo."
      ref:
        required: false
        type: string
        default: ${{ github.ref }}
        description: "Specify the branch of the Terraform code. Normally left blank to use calling ref."
      artefact_path:
        required: false
        type: string
        default: "nonexistentfile.txt"
        description: "If there are artefacts created from data sources, specify the path here so they are downloaded before applying" 
  
    secrets:
      AWS_ROLE_NAME:
        required: false
      AWS_ACCOUNT_ID:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_CLIENT_ID:
        required: false
      AZURE_RESOURCE_GROUP_NAME:
        required: false
      TF_MODULES_SSH_DEPLOY_KEY:
        required: false
        description: "The SSH key used to clone Terraform modules downloaded as part of the Terraform init"
      REPO_SSH_DEPLOY_KEY:
        required: false
        description: "The SSH key used to checkout private remote repos"
      SSH_DEPLOY_KEY:
        required: false
        description: "Deprecated: Use either TF_MODULES_SSH_DEPLOY_KEY or REPO_SSH_DEPLOY_KEY instead."
      TF_PLAN_ENCRYPTION_PASSPHRASE:
        required: true
        description: "The passphrase used to encrypt Terraform Plans before uploading them as Github Artifacts"
  
        
jobs:
  define_matrix:
    name: Define directory matrix for build
    runs-on: ubuntu-latest
    outputs:
      stack_config: "${{ steps.stack_config.outputs.json_directory_list }}"
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          ssh-key: ${{ secrets.REPO_SSH_DEPLOY_KEY }}
      - name: Determine order to run Terraform stacks
        uses: >-
          ukhsa-collaboration/devops-github-actions/.github/actions/terraform-dependency-sort@v0.8.0
        id: stack_config

  filter_matrix_1:
    name: Filter matrix for only planned changes
    needs:
      - define_matrix
    runs-on: ubuntu-latest
    outputs:
      filtered_matrix: ${{ steps.filter_matrix.outputs.filtered_matrix }}
    steps:
      - name: Filter Stacks
        env:
          ENVIRONMENT_NAME: ${{ inputs.environment_name }}
        id: filter_matrix
        run: |
          echo '${{ needs.define_matrix.outputs.stack_config }}' > initial_matrix.json
          
          filtered_matrix=$(jq -c --arg env_name "${ENVIRONMENT_NAME}" '
          [ .[]
            | select(.planned_changes == true)
            | if .runner_label == "self-hosted"
              then .runner_label = ["self-hosted", $env_name]
              else .
              end
          ]
          ' initial_matrix.json)

          echo "Filtered Matrix: $filtered_matrix"
          echo "filtered_matrix=$filtered_matrix" >> $GITHUB_OUTPUT
  
  check:
    name: Lint and SAST Scan Terraform code
    uses: ./.github/workflows/terraform-code-check.yml
    needs:
      - filter_matrix_1
    strategy:
      matrix:
        stack: ${{ fromJSON(needs.filter_matrix_1.outputs.filtered_matrix) }}
    with:
      stack_root_directory: "${{ matrix.stack.directory }}"
      repo: ${{ inputs.repo }}
      ref: ${{ inputs.ref }}
      tflint_module_scan: ${{ inputs.tflint_module_scan }}
    secrets:
      REPO_SSH_DEPLOY_KEY: ${{ secrets.REPO_SSH_DEPLOY_KEY }}

  plan:
    name: Plan Terraform
    uses: ./.github/workflows/terraform-core.yml
    needs:
      - check
      - filter_matrix_1
    with:
      environment_name: ${{ inputs.environment_name }}
      aws_region: ${{ inputs.aws_region }}
      repo: ${{ inputs.repo }}
      ref:  ${{ inputs.ref }}
      stack_config: "${{ needs.filter_matrix_1.outputs.filtered_matrix }}"
      destructive_action_check: ${{ inputs.destructive_action_check }}
      terraform_action: "apply"
      execute_terraform_plan: false
      upload_plan: true
      download_existing_plan: false
      python_version: ${{ inputs.python_version }}
      artefact_path: ${{ inputs.artefact_path }}
    secrets: inherit

  approve:
    name: Approve deployment
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    if: ${{ inputs.execute_terraform_plan }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs:
      - check
      - plan
      - filter_matrix_1
    steps:
      - name: "Check approval requirement"
        run: |
          protection_rules=$(gh api -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository }}/environments/${{ inputs.environment_name }} \
          | jq -r '.protection_rules | length')

          if [[ $protection_rules == "0" ]]; then
            echo "Environment ${{ inputs.environment_name }} doesn't require manual approval. Automatically proceeding..."
          fi

  filter_matrix_2:
    name: Filter matrix for only planned changes
    needs:
      - plan
      - approve
    runs-on: ubuntu-latest
    outputs:
      filtered_matrix: ${{ steps.filter_matrix.outputs.filtered_matrix }}
      skip_remaining: ${{ steps.check_matrix.outputs.skip_remaining }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: "./artifacts"
      - name: Filter Stacks
        id: filter_matrix
        run: |
          jq -s '.' ./artifacts/**/updated_matrix.json > combined_matrix.json
          cat combined_matrix.json

          filtered_matrix=$(jq -c '
          [ .[]
            | select(.planned_changes == true)
          ] | sort_by(.order)
          ' combined_matrix.json)

          echo "Filtered Matrix: $filtered_matrix"
          echo "filtered_matrix=$filtered_matrix" >> $GITHUB_OUTPUT
      - name: Check if filtered matrix is empty
        id: check_matrix
        run: |
          filtered_matrix='${{ steps.filter_matrix.outputs.filtered_matrix }}'
          if [ "$filtered_matrix" = "[]" ]; then
            echo "Matrix is empty"
            echo "skip_remaining=true" >> $GITHUB_OUTPUT
          else
            echo "Matrix is not empty"
            echo "skip_remaining=false" >> $GITHUB_OUTPUT
          fi

  apply:
    name: Run Terraform
    if: ${{ needs.filter_matrix_2.outputs.skip_remaining == 'false' }}
    uses: ./.github/workflows/terraform-core.yml
    needs:
      - approve
      - filter_matrix_2
    with:
      environment_name: ${{ inputs.environment_name }}
      aws_region: ${{ inputs.aws_region }}
      repo: ${{ inputs.repo }}
      ref:  ${{ inputs.ref }}
      stack_config: "${{ needs.filter_matrix_2.outputs.filtered_matrix }}"
      destructive_action_check: ${{ inputs.destructive_action_check }}
      terraform_action: "apply"
      execute_terraform_plan: ${{ inputs.execute_terraform_plan }}
      upload_plan: false
      download_existing_plan: true
      python_version: ${{ inputs.python_version }}
      artefact_path: ${{ inputs.artefact_path }}
    secrets: inherit

  post-deployment-qa-checks:
    name: Run post deployment QA checks.
    uses: ./.github/workflows/terraform-post-deployment-qa.yml
    needs: 
      - apply
      - filter_matrix_2
    with:
      environment_name: ${{ inputs.environment_name }}
      aws_region: ${{ inputs.aws_region }}
      stack_config: "${{ needs.filter_matrix_2.outputs.filtered_matrix }}"
    secrets: inherit
